version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: attendance_db
    environment:
      POSTGRES_DB: attendance_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - attendance_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: attendance_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - attendance_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: attendance_backend
    environment:
      - DEBUG=True
      - DB_NAME=attendance_system
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - media_files:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - attendance_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: attendance_celery
    environment:
      - DEBUG=True
      - DB_NAME=attendance_system
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - db
      - redis
      - backend
    networks:
      - attendance_network
    command: celery -A attendance_system worker --loglevel=info

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: attendance_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=development
    networks:
      - attendance_network
    command: npm start

  # Nginx (for production)
  nginx:
    image: nginx:alpine
    container_name: attendance_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - media_files:/var/www/media
      - static_files:/var/www/static
    depends_on:
      - backend
      - frontend
    networks:
      - attendance_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

networks:
  attendance_network:
    driver: bridge